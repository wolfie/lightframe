#!/usr/bin/php
<?php
/**
 * Set up LightFrame
 * 
 * Copy files to appropriate places, make softlinks for index.php, setup.php and 
 * .htaccess. Determine whether mod_rewrite is supported. Determine SQL type
 * and ask for host/user/pass.
 * 
 * [ the following are implemented ]
 * startproject[ <path>] -- where to place user's files
 * scanserver -- check for server's support of features
 *
 * [ the following are proposed ]
 * startapp[ <path>] -- 
 * show sql -- show the SQL generated by the models
 * show sqldiff -- show the SQL required to modify the current database to match those defined in models
 * version --
 * help --
 * 
 * @license http://www.apache.org/licenses/LICENSE-2.0 Apache License v2.0
 * @author Henrik Paul
 * 
 */

define('DISLPAY_HELP', true);
define('SETUP_VERSION', '0');
define('ANSI', chr(27).'[9');
define('GREY', ANSI.'0m');
define('RED', ANSI.'1m');
define('GREEN', ANSI.'2m');
define('YELLOW', ANSI.'3m');
define('BLUE', ANSI.'4m');
define('MAGENTA', ANSI.'5m');
define('CYAN', ANSI.'6m');
define('WHITE', ANSI.'7m');
define('OFF', chr(27).'[0m');

if (!defined('STDIN')) {
	die('You must run this script in the command line');
}

// show the command line help per default
if ($_SERVER['argc'] < 2) {
	setup_help(false);
	die();
}

$option = 'setup_'.strtolower($_SERVER['argv'][1]);
$value = $_SERVER['argv'][2];

if (function_exists($option)) {
	$option($value);
}
else {
	die('Unknown command'."\n\n");
}

function setup_help($arg) {
	if (!$arg) {
		echo
		'To get more info about a particular command, use "help <command>" as an argument.'."\n\n".
		'startproject'."\n".
		'scanserver'."\n".
		'createdb'."\n".
		"\n";
	}
	elseif (function_exists('setup_'.$arg)) {
		$function = 'setup_'.$arg;
		echo $function(DISPLAY_HELP);
	}
	else {
		die('No such command'."\n\n");
	}
}


function setup_startproject($arg) {
	if ($arg === DISPLAY_HELP) {
		echo 
		WHITE.'startproject: '.OFF.'copy template files needed for a new LightFrame project'."\n".
		'usage: '.WHITE.'startproject'.OFF.' [PATH]'."\n".
		"\n".
		wordwrap('if PATH is provided, the files will be copied to that path. Otherwise they are copied to the current working path'."\n").
		"\n";
		die();
	}
	
	if (!$arg) {
		$path = getcwd();
	}
	else {
		$path = $arg;
	}
	
	$templatepath = dirname(__FILE__).'/projectfiles';
	if (!is_dir($templatepath)) {
		die('"'.$templatepath.'" is not a directory'."\n");
	}
	
	chdir($templatepath);
	_startproject_install(_startproject_findfilesfrom('./'), $path);
	
	echo "\n".'new project created!'."\n\n";
}

function setup_scanserver($arg) {
	if ($arg === DISPLAY_HELP) {
		echo 'meh'."\n\n";
		die();
	}
	
	// I'm checking for everything atm. Take out everything that's not supported!
	$features = array(
		'SQL' => array(
			'MySQL          (mysql) ' => function_exists('mysql_connect'),
			'MySQL Improved (mysqli)' => function_exists('mysqli_connect'),
			'MySQL Improved ()      ' => class_exists('mysqli'),
			'PostgreSQL     (pgsql) ' => function_exists('pg_connect'),
			'SQLite         (sqlite)' => function_exists('sqlite_open'),
			'SQLite         ()      ' => class_exists('SQLiteDatabase'),
			'PDO            ()      ' => class_exists('PDO')
		),
		'Compression' => array(
			'ZIP   ()' => function_exists('zip_open'),
			'ZIP   ()' => class_exists('ZipArchive'),
			'GZip  ()' => function_exists('gzopen'),
			'BZip2 ()' => function_exists('bzopen'),
			'RAR   ()' => function_exists('rar_open')
		),
		'Image Manipulation' => array (
			'ImageMagick ()' => class_exists('Imagick'),
			'GDLib       ()' => function_exists('imagecreate')
		)
	);
	
	foreach ($features as $group => $featureset) {
		echo $group.":\n";
		foreach ($featureset as $setting => $status) {
			echo '  '.$setting.': ' . ($status ? 'yes' : 'no') . "\n";
		}
		echo "\n";
	}
	
	if (!in_array(true, $features['SQL'])) {
		echo 'The server does not have a supported database engine. LightFrame functionality will be very limited.'."\n";
	}
	
	echo "\n";
}

function setup_createdb($settingsFile) {
	require_once(dirname(__FILE__).'/../lib/model/model.php');
	require_once(dirname(__FILE__).'/../lib/exceptions.php');
	
	if (!$settingsFile) {
		$settingsFile = './settings.php';
	}
	
	if(!is_readable($settingsFile) || !is_file($settingsFile)) {
		trigger_error($settingsFile .'is not a readable file');
	}
	
	require_once($settingsFile);
	
	$files = _createdb_findmodelfiles(substr(LF_APPS_PATH,0,-1));
	
	echo WHITE.'Found following model files:'."\n".OFF;
	if (count($files) === 0) {
		die('no model files found'."\n");
	}
	else foreach ($files as $file) {
		echo $file."\n";
		require $file;
	}
	echo "\n";
	
	$models = _createdb_findmodels($files);
	$sql = array();
	echo WHITE.'Found following models:'."\n".OFF;
	if (count($models) === 0) {
		die ('no models found'."\n");
	}
	else foreach ($models as $model) {
		echo $model."\n";
		$model = new $model();
		$sql[] = $model->_getSQLCreateTable();
	}
	echo "\n";
	
	$db = new SQL();
	echo WHITE.'Running following queries:'."\n".OFF;
	foreach ($sql as $query) {
		echo $query."\n";
		$db->query($query);
	}
	
	echo WHITE."\n".'ok'."\n".OFF;
}


// Auxiliary functions

function _createdb_findmodelfiles($dir) {
	$files = array();
	
	foreach (glob($dir.'/*', GLOB_ONLYDIR|GLOB_NOSORT) as $d) {
		$files = _createdb_findmodelfiles($d);
	}
	
	if (file_exists($dir.'/models.php')) {
		$files[] = $dir.'/models.php';
	}
	
	return $files;
}

function _createdb_findmodels($files) {
	$models = array();
	
	foreach ($files as $file) {
		$contents = file($file);
		foreach ($contents as $line) {
			if (preg_match('/class (?P<model>[^ ]+) extends Model/U',$line,$matches)) {
				 $models[] = $matches['model'];
			}
		}
	}
	
	return $models;
}

function _startproject_findfilesfrom($path) {
	if (!is_readable(getcwd().'/'.$path)) {
		die('directory is not readable: "'.getcwd().'/'.$path.'"'."\n");
	}
	
	foreach (glob($path.'*') as $line) {
		if (is_dir(getcwd().'/'.$line)) {
			$files[] = _startproject_findfilesfrom($line.'/');
		}
		else {
			if (!is_readable(getcwd().'/'.$line)) {
				die('can\'t read file "'.getcwd().'/'.$line.'"'."\n");
			}
			else {
				$files[] = $line;
			}
		}
	}
	return $files;
}


function _startproject_install($filelist, $destination) {
	if (!is_dir($destination) || !is_writable($destination)) {
		die('can\'t write to directory "'.$destination.'"'."\n");
	}
	
	if (glob($destination.'/*')) {
		die('"'.$destination.'" is not an empty directory. Can\'t start a new project!'."\n");
	}
	
	foreach($filelist as $file) {
		if (is_array($file)) {
			mkdir($destination.'/'.substr(dirname($file[0]),2));
			_startproject_install($file, $destination.'/'.substr(dirname($file[0]),2));
		}
		else {
			echo substr($file,2).' > '.$destination."\n";
			copy($file, $destination.'/'.basename($file));
		}
	}
}
?>